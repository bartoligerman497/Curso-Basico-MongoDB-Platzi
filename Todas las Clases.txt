Clase 1 Qué aprenderás sobre MongoDB

¡Bienvenidas y Bienvenidos al Curso de Mongo DB!

Con nuestro profesor, Albert Ramírez, vamos a aprender sobre bases de datos NoSQL como MongoDB, cómo realizar operaciones CRUD desde la consola con MongoDB Compass o con tu lenguaje de programación favorito y cómo pasar nuestros clusters al entorno de producción.

El proyecto del curso es PlatziMongo, una API que responde las clases que hemos subido a la plataforma y esta hecha en Python con Flask. No te preocupes si no manejas muy bien estos temas, gran parte del código ya esta hecho para que nosotros solo nos preocupemos por crear los métodos necesarios para integrar el proyecto con MongoDB.

Clase 2 Bases de datos NoSQL

Las bases de datos NoSQL tienen 4 grandes familias: Key Value Stores, basadas en grafos, columnares y basadas en documentos.

Key Value Stores: Guardan la información en formato de llaves y valores. Las usamos para guardar cache, información de sesión de los usuarios o cosas muy sencillas. Son muy rápidas de consultar pero no podemos usarlas en casos más complejos donde necesitamos estructuras más especiales. El mejor ejemplo de estas bases de datos es Redis.

Graph Databases: Bases de datos basadas en Grafos. Nos permiten establecer conexiones entre nuestras entidades para realizar consultas de una forma más eficiente que en bases de datos relacionales (así como Twitter o Medium donde cada publicación tiene diferentes relaciones entre sus usuarios, likes, etc). Por ejemplo: Neo4j o JanusGraph.

Wide-column Stores: Bases de datos columnares. Tienen una llave de fila y otra de columnas para hacer consultas muy rápidas y guardar grandes cantidades de información pero modelar los datos se puede volver un poco complicado. Las usamos en Big Data, IoT, sistemas de recomendaciones, entre otras. Por ejemplo: Cassandra o HBase.

Document Databases: Bases de datos basadas en documentos. Nos permiten guardar documentos dentro de colecciones, tiene muy buena performance y flexibilidad que nos permite modelar casos de la vida real de forma sencilla y efectiva. Por ejemplo: MongoDB o CouchBase.

Clase 3 Definición de MongoDB y su ecosistema (herramientas de uso)

MongoDB es una base de datos gratis y de código abierto No Relacional basada en documentos que nos permite guardar una gran cantidad de documentos de forma distribuida. Mongo también es el nombre de la compañía que desarrolla el código de esta base de datos.

Una de sus principales características es que nos permite guardar nuestras estructuras o documentos en formato JSON (no exactamente JSON, pero si algo muy parecido, lo veremos más adelante) para tener una gran flexibilidad a la hora de modelar situaciones de la vida real.

Por ser una base de datos distribuida podemos hablar no de uno sino de varios servidores, lo que conocemos como el Cluster de MongoDB. Gracias a esto obtenemos una gran escalabilidad de forma horizontal (escalabilidad en cantidad de servidores).

MongoDB es “Schema Less” lo que permite que nuestros documentos tengan estructuras diferentes sin afectar su funcionamiento, algo que no podemos hacer con las tablas de las bases de datos relacionales. Su lenguaje para realizar queries, índices y agregaciones es muy expresivo.

Clase 4 MongoDB Atlas

Tenemos varios proveedores que nos permiten utilizar o alquilar MongoDB como servicio y en este caso vamos a usar MongoDB Atlas por ser desarrollado por las mismas personas que desarrollan MongoDB.

MongoDB Atlas tiene las siguientes características:

Aprovisionamiento automático de clusters con MongoDB
Alta disponibilidad
Altamente escalable
Seguro
Disponible en AWS, GCP y Microsoft Azure
Fácil monitoreo y optimización

Clase 7 Mongo Shell, configuración de clientes

COMANDOS DE MONGO

correr MongoDB
$ mongo

crear y usar DB
$ use DBNAME

listar DBs
$ show dbs

crear colección e insertar documento
$ db.DBNAME.insertOne({"name":"camilo"})

listar documentos de colección
$ db.DBNAME.find()

listar las colecciones
$ show collections

mostrar un documento cualquiera
$ db.DBNAME.findOne()

saber que DB estamos usando
$ db

db.inventory.insertOne(
        { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }
)

Clase 9 Bases de datos, Colecciones y Documentos en MongoDB

Las Bases de Datos son los contenedores físicos para nuestras colecciones. Cada base de datos tiene un archivo propio en el sistema de archivos de nuestra computadora o servidor y un Cluster puede tener múltiples bases de datos.

Las Colecciones son agrupaciones de documentos. Son equivalentes a las tablas en bases de datos relacionales pero NO nos imponen un esquema o estructura rígida para guardar información.

Los Documentos son registros dentro de las colecciones. Son la unidad básica de MongoDB y son análogos a los objetos JSON pero en realidad son BSON.

Base de datos:

Contenedor físico de colecciones.
Cada base de datos tiene su archivo propio en el sistema de archivos.
Un cluster puede tener múltiples bases de datos.

Colecciones:

Agrupación de documentos.
Equivalente a una tabla en las bases de datos relacionales.
No impone un esquema.
Documentos:

Un registro dentro de una colección.
Es análogo a un objeto JSON (BSON).
La unidad básica dentro de MongoDB.

Clase 10 Operaciones CRUD desde la consola de MongoDB

Instrucciones y comandos de la clase:

Conexión con el cluster de MongoDB Atlas: mongo "URL DE NUESTRO CLUSTER", (recuerda añadir tu IP a la lista de IPs permitidas para no tener problemas en esta parte).

Listar las bases de datos de nuestro cluster: show dbs.

Seleccionar una base de datos: use NOMBRE_BD. Debemos crear por lo menos un documento si la base de datos es nueva porque MongoDB no crea bases de datos vacías.

Recordar qué base de datos estamos usando: db.

Listar las colecciones de nuestra base de datos: show collections.

Crear una colección (opcional) y añadir un elemento en formato JSON: db.NOMBRE_COLECCIÓN.insertOne({ ... }). La base de datos responde true si la operación fue exitosa y crea el campo irrepetible de _id si nosotros no lo especificamos.

Crear una colección (opcional) y añadir algunos elementos en formato JSON: db.NOMBRE_COLECCIÓN.insertMany([{ ... }, { ... }]). Recibe un array de elementos y devuelve todos los IDs de los elementos que se crearon correctamente.

Encontrar elementos en una colección: db.NOMBRE_COLECCIÓN.find() Podemos aplicar filtros si queremos o encontrar solo el primer resultado con el método findOne().

Listar todos los posibles comandos que podemos ejecutar: db.NOMBRE_COLECCIÓN.help().

# Conectarse a MongoDB
mongo <URI Atlas>


# Usar la base de datos creada de platzi
use platzi-db


# El campo _id si no es agregado por nosotros de forma explícita, MongoDB lo agrega por nosotros como un ObjectId
# el campo _id es obligatorio en todos los documentos

Siguiendo la Clase
db.inventory.find( { item: "canvas" } ).pretty()
db.inventory.find( { item: "canvas" } ).count()
db.inventory.findOne()
db.inventory.findOne({_id: ObjectId("")})

Cantidad menor a 125 espacificando el id
db.inventory.findOne({_id: ObjectId(""), qty: {$lte:125}})

db.inventory.updateOne({_id: ObjectId("")}, {$set: {qty:130}})


# ---------------------------------Create-----------------------------
db.inventory.insertOne({_id:"soy id", item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } })

db.inventory.insertOne({ item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } })

db.inventory.insertMany( [
   { item: "canvas", qty: 100, size: { h: 28, w: 35.5, uom: "cm" }, status: "A" },
   { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "mat", qty: 85, size: { h: 27.9, w: 35.5, uom: "cm" }, status: "A" },
   { item: "mousepad", qty: 25, size: { h: 19, w: 22.85, uom: "cm" }, status: "P" },
   { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
   { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
   { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
   { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
   { item: "sketchbook", qty: 80, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
   { item: "sketch pad", qty: 95, size: { h: 22.85, w: 30.5, uom: "cm" }, status: "A" }
] )

db.inventory.insertOne({ _id: "one", item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } })
# Atomicidad, todas las operaciones de escritura en MongoDB con atómicas a nivel de documentos 


# ---------------------------------Read-------------------------------
db.inventory.find( {} )


# Igualdad 
db.inventory.find( { status: "D" } )


# Operadores
db.inventory.find( { qty: { $gt: 30 } } )


# Condición AND
db.inventory.find( { status: "A", qty: { $lt: 30 } } )


# Condición OR con operador
db.inventory.find( { $or: [ { status: "A" }, { qty: { $lt: 30 } } ] } )


# Trae el primer documento que cumpla con el filtro de acuerdo al orden natural en que los documentos se encuentren guardados en disco
db.inventory.findOne( { status: "A", qty: { $lt: 30 } } )


# ---------------------------------Update-----------------------------
# Update One
db.inventory.updateOne(
   { item: "paper" },
   {
     $set: { "size.uom": "cm", status: "P" },
     $currentDate: { lastModified: true }
   })
# Update Many
db.inventory.find({qty: {$lt: 50}})


db.inventory.updateMany(
   { "qty": { $lt: 50 } },
   {
     $set: { "size.uom": "in", status: "P" },
     $currentDate: { lastModified: true }
   }
)


db.inventory.find({qty: {$lt: 50}})


# Reemplazar un documento y conservar su _id
db.inventory.find({item: "paper"})


db.inventory.replaceOne(
   { item: "paper" },
   { item: "paper", instock: [ { warehouse: "A", qty: 60 }, { warehouse: "B", qty: 40 } ] }
)


db.inventory.find({item: "paper"})
# ---------------------------------Delete-----------------------------
db.inventory.find({status: "A"})
# Borrar muchos documentos de acuerdo a un filtro
db.inventory.deleteMany({ status : "A" })


db.inventory.find({status: "D"})
# Borrar un documento
db.inventory.deleteOne( { status: "D" } )


# Borrar todos los documentos de una base datos
db.inventory.deleteMany({})

Clase 12 Tipos de datos

Strings: Nos sirven para guardar textos.
Boolean: Información cierta o falsa (true y false).
ObjectId: Utilizan el tiempo exacto en el que generamos la consulta para siempre generan IDs únicos. Existen en BSON pero no en JSON.
Date: Nos sirven para guardar fechas y hacer operaciones de rangos entre ellas.
Números: Doubles, Integers, Integers 64 bits y Decimals.
Documentos Embebidos: Documentos dentro de otros documentos ({}).
Arrays: Arreglos o listas de cualquier otro tipo de datos, incluso, de otras listas.

https://www.mongodb.com/docs/manual/reference/bson-types/

Clase 13 ¿Qué son los esquemas y las relaciones?

Los esquemas son la forma en que organizamos nuestros documentos en nuestras colecciones. MongoDB no impone ningún esquema pero podemos seguir buenas prácticas y estructurar nuestros documentos de forma parecida (no igual) para aprovechar la flexibilidad y escalabilidad de la base de datos sin aumentar la complejidad de nuestras aplicaciones.

Las relaciones son la forma en que nuestras entidades o documentos sen encuentran enlazados unos con otros. Por ejemplo: Una carrera tiene multiples cursos y cada curso tiene multiples clases.

Clase 14 Relaciones entre documentos

Las documentos embebidos nos ayudan a guardar la información en un solo documento y nos ahorra el tiempo que tardamos en consultar diferentes documentos a partir de referencias. Sin embargo, las referencias siguen siendo muy importantes cuando debemos actualizar información en diferentes lugares de forma continua.

Clase 15 Operadores para realizar queries y proyecciones 

$eq     =
$gt      >
$gte   >=
$lt       <
$lte    <=
$ne    !=
$in     valores dentro de un rango
$nin    valores que no estan dentro de un rango
$and   Une queries con un AND logico
$not   Invierte el efecto de un query
$nor   Une queries con un NOR logico
$or      Une queries con un OR logico
$exist     Docuemntos que cuentan con un campo especifico
$type     Docuemntos que cuentan con un campo de un tipo especifico
$all          Arreglos que contengan todos los elementos del query
$elemMatch    Documentos que cumplen la condicion del $elemMatch en uno de sus elementos
$size    Documentos que contienen un campo tipo arreglo de un tamaño especifico.

Clase 16 Usando operadores para realizar Updates en arreglos

https://www.mongodb.com/docs/manual/reference/operator/

En este enlace se encuentran la referencia a todos los operadores que se encuentran en MongoDb, antes de emplear lógica adicional para realizar una operación vale la pena echar una ojeada a la lista de operadores que en algunos casos pueden facilitar mucho las cosas.

Para realizar las relaciones entre carreras y cursos empleamos los operadores $addToSet y $pull estos operadores sirven para agregar $addToSet o retirar $pulldocumentos de un arreglo dependiendo del filtro que aplicamos.

Así cuando ejecutamos db.carreras.update_one({'_id': ObjectId(json['id_carrera'])}, {'$addToSet': {'cursos': curso}}) $addToSet lo que hace es agregar el objeto curso al arreglo cursos, si el arreglo cursos no existe lo crea.

Para retirar un curso de una carrera usamos $pull de la siguiente manera db.carreras.update_one({'_id': ObjectId(json['id_carrera'])}, {'$pull': {'cursos': {'_id': ObjectId(json['id_curso'])}}}) aquí $pull recibe un filtro y todos los elementos del arreglo cursos que cumplan con ese filtro serán borrados.

skip() y limit()

Si tenemos una consulta que retorna 100 documentos pero solamente necesitamos los documentos del número 20 al 30, la manera de hacerlo es usando skip() y limit().

Si tenemos 100 carreras y solamente queremos las primeras 10 podemos ejecutar db.carreras.find({}).limit(10) esta nos traerá las primeras 10 carreras.

Ahora si queremos las carreras ubicadas en los puestos 40 y 50 lo que debemos hacer es db.carreras.find({}).skip(40).limit(10)

Como vemos skip() y limit() son muy útiles para realizar paginaciones, cuando tenemos consultas que retornan muchos documentos y que en algunos casos la totalidad de los documentos no es utilizada es buena práctica limitar el número de documentos que hacemos viajar entre nuestro cluster de base de datos y el código de nuestra aplicación. Esto puede ayudar a mejorar la velocidad con que las consultas son procesadas por la aplicación.

Ejercicios de práctica usando operadores

// Arreglo de ejemplo
use test
db.inventory.insertMany(

[{ _id: 1, item: { name: "ab", code: "123" }, qty: 15, tags: [ "A", "B", "C" ] },
{ _id: 2, item: { name: "cd", code: "123" }, qty: 20, tags: [ "B" ] },
{ _id: 3, item: { name: "ij", code: "456" }, qty: 25, tags: [ "A", "B" ] },
{ _id: 4, item: { name: "xy", code: "456" }, qty: 30, tags: [ "B", "A" ] },
{ _id: 5, item: { name: "mn", code: "000" }, qty: 20, tags: [ [ "A", "B" ], "C" ] }]

)

// $or
db.inventory.find({$or: [{qty: {$gt: 25}}, {qty: {$lte: 15}}]})

// $gte
db.inventory.find({qty: {$gte: 25}})

// $size
db.inventory.find({tags: {$size: 2}})

// Insertemos estos documentos de ejemplo en la colección survey
db.survey.insertMany([
{ _id: 1, results: [ { product: "abc", score: 10 }, { product: "xyz", score: 5 } ] }
{ _id: 2, results: [ { product: "abc", score: 8 }, { product: "xyz", score: 7 } ] }
{ _id: 3, results: [ { product: "abc", score: 7 }, { product: "xyz", score: 8 } ] }
])

// $elemMatch
db.survey.find(
   { results: { $elemMatch: { product: "xyz", score: { $gte: 8 } } } }
)

db.survey.find(
   { results: { $elemMatch: { product: "xyz" } } }```
   
Clase 17 Operaciones avanzadas con Agregaciones

Las agregaciones son operaciones avanzadas que podemos realizar sobre nuestra base de datos con un poco más de flexibilidad en nuestros documentos.

Pipeline de Agregaciones: Es un grupo de multiples etapas que ejecutan agregaciones en diferentes momentos. Debemos tener muy en cuenta el performance de nuestras agregaciones porque las agregaciones corren en todo el cluster.

Map-Reduce: Nos permite definir funciones de JavaScript para ejecutar operaciones avanzadas. La función de map nos permite definir o “mappear” los campos que queremos usar y la función reduce nos permite ejecutar operaciones y devolver resultados especiales. Por ejemplo: podemos mappear algunos campos y calcular la cantidad de elementos que cumplen ciertas condiciones.

Agregaciones de propósito único: Funciones ya definidas que nos ayudan a calcular un resultado especial pero debemos tener cuidado porque pueden mejorar o afectar el performance de la base de datos. Por ejemplo: count(), estimatedDocumentCount y distinct.

Clase 20 Diseñando el esquema de clases, cursos y carreras

Vamos a usar tanto referencias como documentos embebidos para guardar la información de nuestros cursos y carreras. Vamos a crear una colección separada para los cursos y otra para las carreras. Esto significa que, si queremos la información de nuestros cursos, debemos consultar dos colecciones diferentes.

Para solucionar este problema vamos a guardar el nombre del curso junto con la referencia al curso en la colección de cursos. Así, cuando consultemos la colección de carreras, vamos a tener también los nombres. Recuerda que si cambie el nombre del curso debes actualizarlo en ambas colecciones.

Clase 23 Consultas más rápidas con Índices

Los índices nos ayudan a que nuestras consultas sean más rápidas porque, sin ellos, MongoDB debería escanear toda la colección en busca de los resultados.

Tipos de índices:

De un solo campo
Compuestos
Multi-llave
Geoespaciales
De texto
Hashed

show dbs
use platzi-db
show collections
db.cursos.getIndexes()

> db.collection.createIndex( { nombre: 'text' } )
> db.collection.find( { $text: { $search: 'aws' } }, { nombre: 1 } )

clase 24 Recomendaciones de Arquitectura y Paso a Producción

Usar proveedores cloud con alta disponibilidad: AWS, Google Cloud o Azure son muy buenas opciones
No te compliques pensando en administración de servidores con MongoDB, servicios como MongoDB Atlas o mlab son muy buenas opciones
Guardar las credenciales en variables de entorno o archivos de configuración fuera del proyecto
Asegura que tu cluster se encuentra en la mis región del proveedor que tu aplicación
Has VPC peering entre la VPC de tu aplicación y la VPC de tu cluster
Cuida la lista de IPs blancas
Puedes habilitar la autenticación en dos pasos
Actualiza constantemente tu versión de MongoDB
Separa los ambientes de desarrollo, test y producción
Habilita la opción de almacenamiento encriptado

Clase 26 Resumen y Conclusiones

¡Felicitaciones por terminar el Curso MongoDB en Platzi!

Aprendimos qué son, cómo funcionan, qué ventajas tienen y qué tipos de bases de datos NoSQL como MongoDB encontramos en el mercado. Programamos operaciones, agregaciones e índices con buenas prácticas para mejorar el performance y crear una API REST con el CRUD de nuestro proyecto PlatziMongo, usamos la consola, la interfaz gráfica y nuestro lenguaje de programación favorito. Tambien, aprendimos cómo funcionan los drivers y los clusters en la arquitectura de nuestras aplicaciones.

Recuerda resolver los ejercicios, completar el examen, dejar 5 estrellitas y dejar tus dudas o comentarios en la sección de discusiones ????.
